#!/bin/bash
set -u

JOPLIN_TOKEN="${JOPLIN_TOKEN:-}"
JOPLIN_ENDPOINT="http://localhost:41184"

__log_error () {
  echo "[ERROR] $1" >&2
}

__joplin_utils_api_get () {
  local concept="$1"
  shift
  local fields="${1-}"
  local method="GET"
  local params="token=${JOPLIN_TOKEN}"
  if [[ -n $fields ]]; then
    params="${params}&fields=$fields"
  fi
  curl -so- -X "$method" "${JOPLIN_ENDPOINT}/${concept}?${params}"
}

__joplin_utils_api_list () {
  local concept="$1"
  shift
  local fields="${1-}"
  local method="GET"
  while true
  do
    params="token=${JOPLIN_TOKEN}"
    if (( page > 0 )); then
      params="${params}&page=$page"
    fi
    params="${params}&limit=${limit}&order_by=updated_time&order_dir=DESC"
    if [[ -n $fields ]]; then
      params="${params}&fields=$fields"
    fi
    result="$(curl -so- -X "$method" "${JOPLIN_ENDPOINT}/${concept}?${params}")"
    has_more="$(jq .has_more <<<"$result")"
    echo "$result"
    if [[ $has_more != 'true' ]]; then
      break
    fi
    (( page++ ))
  done
}

__joplin_utils_api_update () {
  local concept="$1"
  shift
  local payload="$1"
  local params="token=${JOPLIN_TOKEN}"
  local method="PUT"
  curl -so- -X "$method" "${JOPLIN_ENDPOINT}/${concept}?${params}" ---data "$payload"
}

__joplin_utils_api_create () {
  local concept="$1"
  shift
  local payload="$1"
  local params="token=${JOPLIN_TOKEN}"
  local method="POST"
  curl -so- -X "$method" "${JOPLIN_ENDPOINT}/${concept}?${params}" -d "$payload"
}

# Usage:
# __joplin_utils_api_create_data "resources" "/path/to/file.png" '{"title":"file.png"}'
__joplin_utils_api_create_data () {
  local concept="$1"
  shift
  local payload_path="$1"
  shift
  local props="${1-}"
  local params="token=${JOPLIN_TOKEN}"
  local method="POST"
  if ! type jq &> /dev/null; then
    __log_error "'jq' command is required"
    return 1
  fi
  if [[ ! -f $payload_path ]]; then
    __log_error "File '$payload_path' does not exist"
    return 1
  fi
  if [[ -n $props ]]; then
    params="${params}&props=$(jq -c . <<<"$props")"
  fi
  curl -so- -X "$method" "${JOPLIN_ENDPOINT}/${concept}?${params}" -F "data=@${payload_path}" ${props:+-F "props=$(jq -c . <<<"$props")"}
  # Example usage:
  ## curl -so- -X POST "http://localhost:41184/resources?token=${JOPLIN_TOKEN}" -F data=@test.png -F 'props={"title":"test.png"}'
}

__joplin_utils_api_delete () {
  local concept="$1"
  shift
  local params="token=${JOPLIN_TOKEN}"
  local method="DELETE"
  curl -so- -X "$method" "${JOPLIN_ENDPOINT}/${concept}?${params}"
}

__joplin_utils_api () {
  if [[ -z $JOPLIN_TOKEN ]]; then
    __log_error "JOPLIN_TOKEN environment variable is not defined"
    return 1
  fi
  local limit=100
  local page=0
  local has_more='false'
  local params=
  if ! type jq 2>&1 > /dev/null; then
    __log_error "'jq' command is required"
    return 1
  fi
  local operation="$1"
  shift
  local method=
  case $operation in
    get)
      __joplin_utils_api_get "$@"
      ;;
    list)
      __joplin_utils_api_list "$@"
      ;;
    create)
      __joplin_utils_api_create "$@"
      ;;
    update)
      __joplin_utils_api_update "$@"
      ;;
    delete)
      __joplin_utils_api_delete "$@"
      ;;
    *)
      __log_error "Invalid operation '$operation'"
      return 1
      ;;
  esac
  return 0
}

